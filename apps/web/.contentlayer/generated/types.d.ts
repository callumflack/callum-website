// NOTE This file is auto-generated by Contentlayer

import type { Markdown, MDX, ImageFieldData, IsoDateTimeString } from 'contentlayer/core'
import * as Local from 'contentlayer/source-files'

export { isType } from 'contentlayer/client'

export type { Markdown, MDX, ImageFieldData, IsoDateTimeString }

/** Document types */
export type Post = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Post'
  draft?: boolean | undefined
  title: string
  /** Use this if you want to display a different link title. Helpful in the UI where it needs to be shorter. */
  linkTitle?: string | undefined
  date: IsoDateTimeString
  endDate?: IsoDateTimeString | undefined
  lede: string
  category: 'writing' | 'projects' | 'library' | 'home' | 'about' | 'content'
  tags?: string[] | undefined
  /** The library type category of the post, where `post` means it's not part of any library sorting, and `hide` means it's not shown in the library */
  libraryType: 'superset' | 'topic' | 'year' | 'post' | 'hide'
  /** The project's external link. */
  projectLink?: string | undefined
  /** An external link used on thumbnails. If present, the UI does not link to the Post page */
  thumbnailLink?: string | undefined
  /** The first asset is used as the thumbnail, which should always be aspect-[1440/880] */
  assets?: Asset[] | undefined
  nextPostLink?: string | undefined
  /** MDX file body */
  body: MDX
  slug: string
  readingTime: json
}  

/** Nested types */
export type Asset = {
  /** File path relative to `contentDirPath` */
  _id: string
  _raw: Local.RawDocumentData
  type: 'Asset'
  src: string
  alt: string
  /** MDX components cannot take arbitrary classes, so we must provide a key to look-up the media/video-aspect map function. The first assetis used as the thumbnail, so it should always have aspect-[1440/880] */
  aspect: string
  /** The poster image for the video. Therefore not required. */
  poster?: string | undefined
  showBorder: boolean

}  

/** Helper types */

export type AllTypes = DocumentTypes | NestedTypes
export type AllTypeNames = DocumentTypeNames | NestedTypeNames

export type DocumentTypes = Post
export type DocumentTypeNames = 'Post'

export type NestedTypes = Asset
export type NestedTypeNames = 'Asset'

export type DataExports = {
  allDocuments: DocumentTypes[]
  allPosts: Post[]
}


export interface ContentlayerGenTypes {
  documentTypes: DocumentTypes
  documentTypeMap: DocumentTypeMap
  documentTypeNames: DocumentTypeNames
  nestedTypes: NestedTypes
  nestedTypeMap: NestedTypeMap
  nestedTypeNames: NestedTypeNames
  allTypeNames: AllTypeNames
  dataExports: DataExports
}

declare global {
  interface ContentlayerGen extends ContentlayerGenTypes {}
}

export type DocumentTypeMap = {
  Post: Post
}

export type NestedTypeMap = {
  Asset: Asset
}

 