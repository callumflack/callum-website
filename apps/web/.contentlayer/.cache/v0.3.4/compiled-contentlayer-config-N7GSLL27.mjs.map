{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["import {\n  defineDocumentType,\n  defineNestedType,\n  makeSource,\n} from \"contentlayer/source-files\";\nimport readingTime from \"reading-time\";\n// import remarkSlug from \"remark-slug\";\n// import { rehypeHighlightCode } from \"./lib/rehype-highlight-code\";\n// import { rehypeMetaAttribute } from \"./lib/rehype-meta-attribute\";\n\n// https://contentlayer.dev/docs/reference/source-files/define-document-type-eb9db60e\nexport const Post = defineDocumentType(() => ({\n  name: \"Post\",\n  filePathPattern: `**/*.mdx`,\n  contentType: \"mdx\",\n  fields: {\n    draft: {\n      type: \"boolean\",\n    },\n    title: {\n      type: \"string\",\n      required: true,\n    },\n    linkTitle: {\n      type: \"string\",\n      description:\n        \"Use this if you want to display a different link title. Helpful in the UI where it needs to be shorter.\",\n    },\n    date: {\n      type: \"date\",\n      required: true,\n    },\n    endDate: {\n      type: \"date\",\n    },\n    lede: {\n      type: \"string\",\n      required: true,\n    },\n    // https://www.contentlayer.dev/docs/reference/source-files/field-types#enum\n    category: {\n      type: \"enum\",\n      options: [\"writing\", \"projects\", \"library\", \"home\", \"about\", \"content\"],\n      required: true,\n    },\n    tags: {\n      // Could use a nested enum but the filtering gets too complicated\n      // \u2026What about just an enum then?\n      // See nested enum example below!\n      // type: \"nested\",\n      // of: Tags,\n      type: \"list\",\n      of: { type: \"string\" },\n      // required: true,\n    },\n    // currently unused? Probably helpful as the site grows.\n    // But I thought we were moving to Astro?\n    libraryType: {\n      type: \"enum\",\n      // superset = category, topic = tag\n      options: [\"superset\", \"topic\", \"year\", \"post\", \"hide\"],\n      default: \"post\",\n      description:\n        \"The library type category of the post, where `post` means it's not part of any library sorting, and `hide` means it's not shown in the library\",\n    },\n    projectLink: {\n      type: \"string\",\n      description: \"The project's external link.\",\n    },\n    thumbnailLink: {\n      type: \"string\",\n      description:\n        \"An external link used on thumbnails. If present, the UI does not link to the Post page\",\n    },\n    assets: {\n      type: \"list\", // despite what docs says, use listed not nested!\n      of: Asset,\n      description:\n        \"The first asset is used as the thumbnail, which should always be aspect-[1440/880]\",\n    },\n    nextPostLink: {\n      type: \"string\",\n      // required: true,\n    },\n  },\n  computedFields: {\n    slug: {\n      type: \"string\",\n      // resolve: (post) => `/posts/${post._raw.flattenedPath}`,\n      resolve: (post) => post._raw.flattenedPath.replace(\"posts/\", \"\"),\n    },\n    readingTime: {\n      type: \"json\",\n      resolve: (post) => readingTime(post.body.raw),\n    },\n  },\n}));\n\n// https://contentlayer.dev/docs/reference/source-files/field-types-defe41e9#nested\nconst Asset = defineNestedType(() => ({\n  name: \"Asset\",\n  fields: {\n    src: {\n      type: \"string\",\n      required: true,\n    },\n    alt: {\n      type: \"string\",\n      required: true,\n    },\n    aspect: {\n      type: \"string\",\n      required: true,\n      description:\n        \"MDX components cannot take arbitrary classes, so we must provide a key to look-up the media/video-aspect map function. The first assetis used as the thumbnail, so it should always have aspect-[1440/880]\",\n    },\n    poster: {\n      type: \"string\",\n      description: \"The poster image for the video. Therefore not required.\",\n    },\n    showBorder: {\n      type: \"boolean\",\n      default: true,\n    },\n  },\n}));\n\nexport default makeSource({\n  contentDirPath: \"posts\",\n  documentTypes: [Post],\n  // mdx: {\n  //   remarkPlugins: [remarkSlug],\n  //   rehypePlugins: [rehypeMetaAttribute, rehypeHighlightCode],\n  // },\n});\n\n// Could use a nested enum here, but all the filtering gets too complicated\n// const Tags = defineNestedType(() => ({\n//   name: \"Tags\",\n//   fields: {\n//     title: {\n//       type: \"enum\",\n//       options: [\n//         \"engineering\",\n//         \"teamwork\",\n//         \"featured\",\n//         \"design\",\n//         \"knowhow\",\n//         \"strategy\",\n//         \"book\",\n//         \"creativity\",\n//       ],\n//     },\n//   },\n// }));\n"],
  "mappings": ";AAAA;AAAA,EACE;AAAA,EACA;AAAA,EACA;AAAA,OACK;AACP,OAAO,iBAAiB;AAMjB,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,IACR;AAAA,IACA,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,WAAW;AAAA,MACT,MAAM;AAAA,MACN,aACE;AAAA,IACJ;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,SAAS;AAAA,MACP,MAAM;AAAA,IACR;AAAA,IACA,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA;AAAA,IAEA,UAAU;AAAA,MACR,MAAM;AAAA,MACN,SAAS,CAAC,WAAW,YAAY,WAAW,QAAQ,SAAS,SAAS;AAAA,MACtE,UAAU;AAAA,IACZ;AAAA,IACA,MAAM;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAMJ,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA;AAAA,IAEvB;AAAA;AAAA;AAAA,IAGA,aAAa;AAAA,MACX,MAAM;AAAA;AAAA,MAEN,SAAS,CAAC,YAAY,SAAS,QAAQ,QAAQ,MAAM;AAAA,MACrD,SAAS;AAAA,MACT,aACE;AAAA,IACJ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,aAAa;AAAA,IACf;AAAA,IACA,eAAe;AAAA,MACb,MAAM;AAAA,MACN,aACE;AAAA,IACJ;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA;AAAA,MACN,IAAI;AAAA,MACJ,aACE;AAAA,IACJ;AAAA,IACA,cAAc;AAAA,MACZ,MAAM;AAAA;AAAA,IAER;AAAA,EACF;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA;AAAA,MAEN,SAAS,CAAC,SAAS,KAAK,KAAK,cAAc,QAAQ,UAAU,EAAE;AAAA,IACjE;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,SAAS,CAAC,SAAS,YAAY,KAAK,KAAK,GAAG;AAAA,IAC9C;AAAA,EACF;AACF,EAAE;AAGF,IAAM,QAAQ,iBAAiB,OAAO;AAAA,EACpC,MAAM;AAAA,EACN,QAAQ;AAAA,IACN,KAAK;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,MACV,aACE;AAAA,IACJ;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,aAAa;AAAA,IACf;AAAA,IACA,YAAY;AAAA,MACV,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA,EACxB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA;AAAA;AAAA;AAAA;AAKtB,CAAC;",
  "names": []
}
